\set MONGO_HOST			`echo \'"$MONGO_HOST"\'`
\set MONGO_PORT			`echo \'"$MONGO_PORT"\'`
\set MONGO_USER_NAME	`echo \'"$MONGO_USER_NAME"\'`
\set MONGO_PASS			`echo \'"$MONGO_PWD"\'`
-- Before running this file user must create database mongo_fdw_regress on
-- MongoDB with all permission for MONGO_USER_NAME user with MONGO_PASS
-- password and ran mongodb_init.sh file to load collections.
\c contrib_regression
CREATE EXTENSION IF NOT EXISTS mongo_fdw;
CREATE SERVER mongo_server FOREIGN DATA WRAPPER mongo_fdw
  OPTIONS (address :MONGO_HOST, port :MONGO_PORT);
CREATE USER MAPPING FOR public SERVER mongo_server;
-- Check version
SELECT mongo_fdw_version();
 mongo_fdw_version 
-------------------
             50503
(1 row)

-- Create foreign tables
CREATE FOREIGN TABLE f_mongo_test (_id name, a int, b text)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'mongo_test');
CREATE FOREIGN TABLE f_test_tbl1 (_id NAME, c1 INTEGER, c2 VARCHAR(10), c3 CHAR(9),c4 INTEGER, c5 pg_catalog.Date, c6 DECIMAL, c7 INTEGER, c8 INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl1');
CREATE FOREIGN TABLE f_test_tbl2 (_id NAME, c1 INTEGER, c2 VARCHAR(14), c3 VARCHAR(13))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl2');
CREATE FOREIGN TABLE countries (_id NAME, name VARCHAR, population INTEGER, capital VARCHAR, hdi FLOAT)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'countries');
CREATE FOREIGN TABLE country_elections (_id NAME, "lastElections.type" VARCHAR, "lastElections.date" pg_catalog.TIMESTAMP)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'countries');
CREATE FOREIGN TABLE main_exports (_id NAME, "mainExports" TEXT[] )
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'countries');
CREATE FOREIGN TABLE test_json ( __doc json)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'warehouse');
CREATE FOREIGN TABLE test_jsonb ( __doc jsonb)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'warehouse');
CREATE FOREIGN TABLE test_text ( __doc text)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'warehouse');
CREATE FOREIGN TABLE test_varchar ( __doc varchar)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'warehouse');
CREATE FOREIGN TABLE f_test5 (_id NAME, c1 NUMERIC)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test5');
CREATE FOREIGN TABLE f_test_tbl4 (_id NAME, a NUMERIC(12, 2))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl4');
CREATE FOREIGN TABLE f_test_tbl5 (_id NAME, a BOOLEAN)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl4');
CREATE FOREIGN TABLE f_test_tbl6 (_id NAME, a INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl5');
CREATE FOREIGN TABLE f_test_tbl7 (_id NAME, a INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test_tbl4');
CREATE FOREIGN TABLE testlog (_id NAME, log VARCHAR, "logMeta.logMac" VARCHAR, "logMeta.nestMore.level" INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'testlog');
CREATE FOREIGN TABLE testdevice (_id NAME, name VARCHAR, mac VARCHAR, level INTEGER)
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'testdevice');
SET datestyle TO ISO;
-- Retrieve data from foreign table using SELECT statement.
SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1
  ORDER BY c1 DESC, c8;
  c1  |  c2   |    c3     |  c4  |     c5     |   c6    |  c7  | c8 
------+-------+-----------+------+------------+---------+------+----
 1400 | EMP14 | ADMIN     |  700 | 1982-01-23 |    1300 |    0 | 10
 1300 | EMP13 | FINANCE   |  400 | 1981-12-03 |    3000 |    0 | 20
 1200 | EMP12 | ADMIN     |  600 | 1981-12-03 |     950 |    0 | 30
 1100 | EMP11 | ADMIN     |  800 | 1987-05-23 |    1100 |    0 | 20
 1000 | EMP10 | SALESMAN  |  600 | 1980-09-08 |    1500 |    0 | 30
  900 | EMP9  | HEAD      |      | 1981-11-17 |    5000 |    0 | 10
  800 | EMP8  | FINANCE   |  400 | 1987-04-19 |    3000 |    0 | 20
  700 | EMP7  | MANAGER   |  900 | 1981-06-09 | 2450.34 |    0 | 10
  600 | EMP6  | MANAGER   |  900 | 1981-05-01 |    2850 |    0 | 30
  500 | EMP5  | SALESMAN  |  600 | 1981-09-28 | 1250.23 | 1400 | 30
  400 | EMP4  | MANAGER   |  900 | 1981-04-02 |    2975 |    0 | 20
  300 | EMP3  | SALESMAN  |  600 | 1981-02-22 |    1250 |  500 | 30
  200 | EMP2  | SALESMAN  |  600 | 1981-02-20 |    1600 |  300 | 30
  100 | EMP1  | ADMIN     | 1300 | 1980-12-17 |   800.3 |    0 | 20
(14 rows)

SELECT DISTINCT c8 FROM f_test_tbl1 ORDER BY 1;
 c8 
----
 10
 20
 30
(3 rows)

SELECT c2 AS "Employee Name" FROM f_test_tbl1 ORDER BY c2 COLLATE "C";
 Employee Name 
---------------
 EMP1
 EMP10
 EMP11
 EMP12
 EMP13
 EMP14
 EMP2
 EMP3
 EMP4
 EMP5
 EMP6
 EMP7
 EMP8
 EMP9
(14 rows)

SELECT c8, c6, c7 FROM f_test_tbl1 ORDER BY 1, 2, 3;
 c8 |   c6    |  c7  
----+---------+------
 10 |    1300 |    0
 10 | 2450.34 |    0
 10 |    5000 |    0
 20 |   800.3 |    0
 20 |    1100 |    0
 20 |    2975 |    0
 20 |    3000 |    0
 20 |    3000 |    0
 30 |     950 |    0
 30 |    1250 |  500
 30 | 1250.23 | 1400
 30 |    1500 |    0
 30 |    1600 |  300
 30 |    2850 |    0
(14 rows)

SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1
  WHERE c1 = 100 ORDER BY 1;
 c1  |  c2  |    c3     |  c4  |     c5     |  c6   | c7 | c8 
-----+------+-----------+------+------------+-------+----+----
 100 | EMP1 | ADMIN     | 1300 | 1980-12-17 | 800.3 |  0 | 20
(1 row)

SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1
  WHERE c1 = 100 OR c1 = 700 ORDER BY 1;
 c1  |  c2  |    c3     |  c4  |     c5     |   c6    | c7 | c8 
-----+------+-----------+------+------------+---------+----+----
 100 | EMP1 | ADMIN     | 1300 | 1980-12-17 |   800.3 |  0 | 20
 700 | EMP7 | MANAGER   |  900 | 1981-06-09 | 2450.34 |  0 | 10
(2 rows)

SELECT c1, c2, c3 FROM f_test_tbl1 WHERE c3 like 'SALESMAN' ORDER BY 1;
 c1 | c2 | c3 
----+----+----
(0 rows)

SELECT c1, c2, c3 FROM f_test_tbl1 WHERE c1 IN (100, 700) ORDER BY 1;
 c1  |  c2  |    c3     
-----+------+-----------
 100 | EMP1 | ADMIN    
 700 | EMP7 | MANAGER  
(2 rows)

SELECT c1, c2, c3 FROM f_test_tbl1 WHERE c1 NOT IN (100, 700) ORDER BY 1 LIMIT 5;
 c1  |  c2  |    c3     
-----+------+-----------
 200 | EMP2 | SALESMAN 
 300 | EMP3 | SALESMAN 
 400 | EMP4 | MANAGER  
 500 | EMP5 | SALESMAN 
 600 | EMP6 | MANAGER  
(5 rows)

SELECT c1, c2, c8 FROM f_test_tbl1 WHERE c8 BETWEEN 10 AND 20 ORDER BY 1;
  c1  |  c2   | c8 
------+-------+----
  100 | EMP1  | 20
  400 | EMP4  | 20
  700 | EMP7  | 10
  800 | EMP8  | 20
  900 | EMP9  | 10
 1100 | EMP11 | 20
 1300 | EMP13 | 20
 1400 | EMP14 | 10
(8 rows)

SELECT c1, c2, c6 FROM f_test_tbl1 ORDER BY 1 OFFSET 5;
  c1  |  c2   |   c6    
------+-------+---------
  600 | EMP6  |    2850
  700 | EMP7  | 2450.34
  800 | EMP8  |    3000
  900 | EMP9  |    5000
 1000 | EMP10 |    1500
 1100 | EMP11 |    1100
 1200 | EMP12 |     950
 1300 | EMP13 |    3000
 1400 | EMP14 |    1300
(9 rows)

-- Retrieve data from foreign table using group by clause.
SELECT c8 "Department", COUNT(c1) "Total Employees" FROM f_test_tbl1
  GROUP BY c8 ORDER BY c8;
 Department | Total Employees 
------------+-----------------
         10 |               3
         20 |               5
         30 |               6
(3 rows)

SELECT c8, SUM(c6) FROM f_test_tbl1
  GROUP BY c8 HAVING c8 IN (10, 30) ORDER BY c8;
 c8 |   sum   
----+---------
 10 | 8750.34
 30 | 9400.23
(2 rows)

SELECT c8, SUM(c6) FROM f_test_tbl1
  GROUP BY c8 HAVING SUM(c6) > 9400 ORDER BY c8;
 c8 |   sum   
----+---------
 20 | 10875.3
 30 | 9400.23
(2 rows)

-- Retrieve data from foreign table using sub-queries.
SELECT c1, c2, c6 FROM f_test_tbl1
  WHERE c8 <> ALL (SELECT c1 FROM f_test_tbl2 WHERE c1 IN (10, 30, 40))
  ORDER BY c1;
  c1  |  c2   |  c6   
------+-------+-------
  100 | EMP1  | 800.3
  400 | EMP4  |  2975
  800 | EMP8  |  3000
 1100 | EMP11 |  1100
 1300 | EMP13 |  3000
(5 rows)

SELECT c1, c2, c3 FROM f_test_tbl2
  WHERE EXISTS (SELECT 1 FROM f_test_tbl1 WHERE f_test_tbl2.c1 = f_test_tbl1.c8)
  ORDER BY 1, 2;
 c1 |       c2       |    c3    
----+----------------+----------
 10 | DEVELOPMENT    | PUNE
 20 | ADMINISTRATION | BANGLORE
 30 | SALES          | MUMBAI
(3 rows)

SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1
  WHERE c8 NOT IN (SELECT c1 FROM f_test_tbl2) ORDER BY c1;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

-- Retrieve data from foreign table using UNION operator.
SELECT c1, c2 FROM f_test_tbl2 UNION
SELECT c1, c2 FROM f_test_tbl1 ORDER BY c1;
  c1  |       c2       
------+----------------
   10 | DEVELOPMENT
   20 | ADMINISTRATION
   30 | SALES
   40 | HR
  100 | EMP1
  200 | EMP2
  300 | EMP3
  400 | EMP4
  500 | EMP5
  600 | EMP6
  700 | EMP7
  800 | EMP8
  900 | EMP9
 1000 | EMP10
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(18 rows)

SELECT c1, c2 FROM f_test_tbl2 UNION ALL
SELECT c1, c2 FROM f_test_tbl1 ORDER BY c1;
  c1  |       c2       
------+----------------
   10 | DEVELOPMENT
   20 | ADMINISTRATION
   30 | SALES
   40 | HR
  100 | EMP1
  200 | EMP2
  300 | EMP3
  400 | EMP4
  500 | EMP5
  600 | EMP6
  700 | EMP7
  800 | EMP8
  900 | EMP9
 1000 | EMP10
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(18 rows)

-- Retrieve data from foreign table using INTERSECT operator.
SELECT c1, c2 FROM f_test_tbl1 WHERE c1 >= 800 INTERSECT
SELECT c1, c2 FROM f_test_tbl1 WHERE c1 >= 400 ORDER BY c1;
  c1  |  c2   
------+-------
  800 | EMP8
  900 | EMP9
 1000 | EMP10
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(7 rows)

SELECT c1, c2 FROM f_test_tbl1 WHERE c1 >= 800 INTERSECT ALL
SELECT c1, c2 FROM f_test_tbl1 WHERE c1 >= 400 ORDER BY c1;
  c1  |  c2   
------+-------
  800 | EMP8
  900 | EMP9
 1000 | EMP10
 1100 | EMP11
 1200 | EMP12
 1300 | EMP13
 1400 | EMP14
(7 rows)

-- Retrieve data from foreign table using EXCEPT operator.
SELECT c1, c2 FROM f_test_tbl1 EXCEPT
SELECT c1, c2 FROM f_test_tbl1 WHERE c1 > 900 ORDER BY c1;
 c1  |  c2  
-----+------
 100 | EMP1
 200 | EMP2
 300 | EMP3
 400 | EMP4
 500 | EMP5
 600 | EMP6
 700 | EMP7
 800 | EMP8
 900 | EMP9
(9 rows)

SELECT c1, c2 FROM f_test_tbl1 EXCEPT ALL
SELECT c1, c2 FROM f_test_tbl1 WHERE c1 > 900 ORDER BY c1;
 c1  |  c2  
-----+------
 100 | EMP1
 200 | EMP2
 300 | EMP3
 400 | EMP4
 500 | EMP5
 600 | EMP6
 700 | EMP7
 800 | EMP8
 900 | EMP9
(9 rows)

-- Retrieve data from foreign table using CTE (with clause).
WITH
  with_qry AS (SELECT c1, c2, c3 FROM f_test_tbl2)
SELECT e.c2, e.c6, w.c1, w.c2 FROM f_test_tbl1 e, with_qry w
  WHERE e.c8 = w.c1 ORDER BY e.c8, e.c2 COLLATE "C";
  c2   |   c6    | c1 |       c2       
-------+---------+----+----------------
 EMP14 |    1300 | 10 | DEVELOPMENT
 EMP7  | 2450.34 | 10 | DEVELOPMENT
 EMP9  |    5000 | 10 | DEVELOPMENT
 EMP1  |   800.3 | 20 | ADMINISTRATION
 EMP11 |    1100 | 20 | ADMINISTRATION
 EMP13 |    3000 | 20 | ADMINISTRATION
 EMP4  |    2975 | 20 | ADMINISTRATION
 EMP8  |    3000 | 20 | ADMINISTRATION
 EMP10 |    1500 | 30 | SALES
 EMP12 |     950 | 30 | SALES
 EMP2  |    1600 | 30 | SALES
 EMP3  |    1250 | 30 | SALES
 EMP5  | 1250.23 | 30 | SALES
 EMP6  |    2850 | 30 | SALES
(14 rows)

WITH
  test_tbl2_costs AS (SELECT d.c2, SUM(c6) test_tbl2_total FROM f_test_tbl1 e, f_test_tbl2 d
    WHERE e.c8 = d.c1 GROUP BY 1),
  avg_cost AS (SELECT SUM(test_tbl2_total)/COUNT(*) avg FROM test_tbl2_costs)
SELECT * FROM test_tbl2_costs
  WHERE test_tbl2_total > (SELECT avg FROM avg_cost) ORDER BY c2 COLLATE "C";
       c2       | test_tbl2_total 
----------------+-----------------
 ADMINISTRATION |         10875.3
(1 row)

-- Retrieve data from foreign table using window clause.
SELECT c8, c1, c6, AVG(c6) OVER (PARTITION BY c8) FROM f_test_tbl1
  ORDER BY c8, c1;
 c8 |  c1  |   c6    |          avg          
----+------+---------+-----------------------
 10 |  700 | 2450.34 | 2916.7800000000000000
 10 |  900 |    5000 | 2916.7800000000000000
 10 | 1400 |    1300 | 2916.7800000000000000
 20 |  100 |   800.3 | 2175.0600000000000000
 20 |  400 |    2975 | 2175.0600000000000000
 20 |  800 |    3000 | 2175.0600000000000000
 20 | 1100 |    1100 | 2175.0600000000000000
 20 | 1300 |    3000 | 2175.0600000000000000
 30 |  200 |    1600 | 1566.7050000000000000
 30 |  300 |    1250 | 1566.7050000000000000
 30 |  500 | 1250.23 | 1566.7050000000000000
 30 |  600 |    2850 | 1566.7050000000000000
 30 | 1000 |    1500 | 1566.7050000000000000
 30 | 1200 |     950 | 1566.7050000000000000
(14 rows)

SELECT c8, c1, c6, COUNT(c6) OVER (PARTITION BY c8) FROM f_test_tbl1
  WHERE c8 IN (10, 30, 40, 50, 60, 70) ORDER BY c8, c1;
 c8 |  c1  |   c6    | count 
----+------+---------+-------
 10 |  700 | 2450.34 |     3
 10 |  900 |    5000 |     3
 10 | 1400 |    1300 |     3
 30 |  200 |    1600 |     6
 30 |  300 |    1250 |     6
 30 |  500 | 1250.23 |     6
 30 |  600 |    2850 |     6
 30 | 1000 |    1500 |     6
 30 | 1200 |     950 |     6
(9 rows)

SELECT c8, c1, c6, SUM(c6) OVER (PARTITION BY c8) FROM f_test_tbl1
  ORDER BY c8, c1;
 c8 |  c1  |   c6    |   sum   
----+------+---------+---------
 10 |  700 | 2450.34 | 8750.34
 10 |  900 |    5000 | 8750.34
 10 | 1400 |    1300 | 8750.34
 20 |  100 |   800.3 | 10875.3
 20 |  400 |    2975 | 10875.3
 20 |  800 |    3000 | 10875.3
 20 | 1100 |    1100 | 10875.3
 20 | 1300 |    3000 | 10875.3
 30 |  200 |    1600 | 9400.23
 30 |  300 |    1250 | 9400.23
 30 |  500 | 1250.23 | 9400.23
 30 |  600 |    2850 | 9400.23
 30 | 1000 |    1500 | 9400.23
 30 | 1200 |     950 | 9400.23
(14 rows)

-- Views
CREATE VIEW smpl_vw AS
  SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1 ORDER BY c1;
SELECT * FROM smpl_vw ORDER BY 1;
  c1  |  c2   |    c3     |  c4  |     c5     |   c6    |  c7  | c8 
------+-------+-----------+------+------------+---------+------+----
  100 | EMP1  | ADMIN     | 1300 | 1980-12-17 |   800.3 |    0 | 20
  200 | EMP2  | SALESMAN  |  600 | 1981-02-20 |    1600 |  300 | 30
  300 | EMP3  | SALESMAN  |  600 | 1981-02-22 |    1250 |  500 | 30
  400 | EMP4  | MANAGER   |  900 | 1981-04-02 |    2975 |    0 | 20
  500 | EMP5  | SALESMAN  |  600 | 1981-09-28 | 1250.23 | 1400 | 30
  600 | EMP6  | MANAGER   |  900 | 1981-05-01 |    2850 |    0 | 30
  700 | EMP7  | MANAGER   |  900 | 1981-06-09 | 2450.34 |    0 | 10
  800 | EMP8  | FINANCE   |  400 | 1987-04-19 |    3000 |    0 | 20
  900 | EMP9  | HEAD      |      | 1981-11-17 |    5000 |    0 | 10
 1000 | EMP10 | SALESMAN  |  600 | 1980-09-08 |    1500 |    0 | 30
 1100 | EMP11 | ADMIN     |  800 | 1987-05-23 |    1100 |    0 | 20
 1200 | EMP12 | ADMIN     |  600 | 1981-12-03 |     950 |    0 | 30
 1300 | EMP13 | FINANCE   |  400 | 1981-12-03 |    3000 |    0 | 20
 1400 | EMP14 | ADMIN     |  700 | 1982-01-23 |    1300 |    0 | 10
(14 rows)

CREATE VIEW comp_vw (s1, s2, s3, s6, s7, s8, d2) AS
  SELECT s.c1, s.c2, s.c3, s.c6, s.c7, s.c8, d.c2
    FROM f_test_tbl2 d, f_test_tbl1 s WHERE d.c1 = s.c8 AND d.c1 = 10
    ORDER BY s.c1;
SELECT * FROM comp_vw ORDER BY 1;
  s1  |  s2   |    s3     |   s6    | s7 | s8 |     d2      
------+-------+-----------+---------+----+----+-------------
  700 | EMP7  | MANAGER   | 2450.34 |  0 | 10 | DEVELOPMENT
  900 | EMP9  | HEAD      |    5000 |  0 | 10 | DEVELOPMENT
 1400 | EMP14 | ADMIN     |    1300 |  0 | 10 | DEVELOPMENT
(3 rows)

CREATE TEMPORARY VIEW temp_vw AS
  SELECT c1, c2, c3 FROM f_test_tbl2;
SELECT * FROM temp_vw ORDER BY 1, 2;
 c1 |       c2       |    c3    
----+----------------+----------
 10 | DEVELOPMENT    | PUNE
 20 | ADMINISTRATION | BANGLORE
 30 | SALES          | MUMBAI
 40 | HR             | NAGPUR
(4 rows)

CREATE VIEW mul_tbl_view AS
  SELECT d.c1 dc1, d.c2 dc2, e.c1 ec1, e.c2 ec2, e.c6 ec6
    FROM f_test_tbl2 d INNER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY d.c1;
SELECT * FROM mul_tbl_view ORDER BY 1, 2, 3;
 dc1 |      dc2       | ec1  |  ec2  |   ec6   
-----+----------------+------+-------+---------
  10 | DEVELOPMENT    |  700 | EMP7  | 2450.34
  10 | DEVELOPMENT    |  900 | EMP9  |    5000
  10 | DEVELOPMENT    | 1400 | EMP14 |    1300
  20 | ADMINISTRATION |  100 | EMP1  |   800.3
  20 | ADMINISTRATION |  400 | EMP4  |    2975
  20 | ADMINISTRATION |  800 | EMP8  |    3000
  20 | ADMINISTRATION | 1100 | EMP11 |    1100
  20 | ADMINISTRATION | 1300 | EMP13 |    3000
  30 | SALES          |  200 | EMP2  |    1600
  30 | SALES          |  300 | EMP3  |    1250
  30 | SALES          |  500 | EMP5  | 1250.23
  30 | SALES          |  600 | EMP6  |    2850
  30 | SALES          | 1000 | EMP10 |    1500
  30 | SALES          | 1200 | EMP12 |     950
(14 rows)

-- Foreign-Foreign table joins
-- CROSS JOIN.
SELECT f_test_tbl2.c2, f_test_tbl1.c2
  FROM f_test_tbl2 CROSS JOIN f_test_tbl1 ORDER BY 1, 2;
       c2       |  c2   
----------------+-------
 ADMINISTRATION | EMP1
 ADMINISTRATION | EMP10
 ADMINISTRATION | EMP11
 ADMINISTRATION | EMP12
 ADMINISTRATION | EMP13
 ADMINISTRATION | EMP14
 ADMINISTRATION | EMP2
 ADMINISTRATION | EMP3
 ADMINISTRATION | EMP4
 ADMINISTRATION | EMP5
 ADMINISTRATION | EMP6
 ADMINISTRATION | EMP7
 ADMINISTRATION | EMP8
 ADMINISTRATION | EMP9
 DEVELOPMENT    | EMP1
 DEVELOPMENT    | EMP10
 DEVELOPMENT    | EMP11
 DEVELOPMENT    | EMP12
 DEVELOPMENT    | EMP13
 DEVELOPMENT    | EMP14
 DEVELOPMENT    | EMP2
 DEVELOPMENT    | EMP3
 DEVELOPMENT    | EMP4
 DEVELOPMENT    | EMP5
 DEVELOPMENT    | EMP6
 DEVELOPMENT    | EMP7
 DEVELOPMENT    | EMP8
 DEVELOPMENT    | EMP9
 HR             | EMP1
 HR             | EMP10
 HR             | EMP11
 HR             | EMP12
 HR             | EMP13
 HR             | EMP14
 HR             | EMP2
 HR             | EMP3
 HR             | EMP4
 HR             | EMP5
 HR             | EMP6
 HR             | EMP7
 HR             | EMP8
 HR             | EMP9
 SALES          | EMP1
 SALES          | EMP10
 SALES          | EMP11
 SALES          | EMP12
 SALES          | EMP13
 SALES          | EMP14
 SALES          | EMP2
 SALES          | EMP3
 SALES          | EMP4
 SALES          | EMP5
 SALES          | EMP6
 SALES          | EMP7
 SALES          | EMP8
 SALES          | EMP9
(56 rows)

-- INNER JOIN.
SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d, f_test_tbl1 e WHERE d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d INNER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

-- OUTER JOINS.
SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d LEFT OUTER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
 40 | HR             |      |       |         |   
(15 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d RIGHT OUTER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d FULL OUTER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
 40 | HR             |      |       |         |   
(15 rows)

-- Local-Foreign table joins.
CREATE TABLE l_test_tbl1 AS
  SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM f_test_tbl1;
CREATE TABLE l_test_tbl2 AS
  SELECT c1, c2, c3 FROM f_test_tbl2;
-- CROSS JOIN.
SELECT f_test_tbl2.c2, l_test_tbl1.c2 FROM f_test_tbl2 CROSS JOIN l_test_tbl1 ORDER BY 1, 2;
       c2       |  c2   
----------------+-------
 ADMINISTRATION | EMP1
 ADMINISTRATION | EMP10
 ADMINISTRATION | EMP11
 ADMINISTRATION | EMP12
 ADMINISTRATION | EMP13
 ADMINISTRATION | EMP14
 ADMINISTRATION | EMP2
 ADMINISTRATION | EMP3
 ADMINISTRATION | EMP4
 ADMINISTRATION | EMP5
 ADMINISTRATION | EMP6
 ADMINISTRATION | EMP7
 ADMINISTRATION | EMP8
 ADMINISTRATION | EMP9
 DEVELOPMENT    | EMP1
 DEVELOPMENT    | EMP10
 DEVELOPMENT    | EMP11
 DEVELOPMENT    | EMP12
 DEVELOPMENT    | EMP13
 DEVELOPMENT    | EMP14
 DEVELOPMENT    | EMP2
 DEVELOPMENT    | EMP3
 DEVELOPMENT    | EMP4
 DEVELOPMENT    | EMP5
 DEVELOPMENT    | EMP6
 DEVELOPMENT    | EMP7
 DEVELOPMENT    | EMP8
 DEVELOPMENT    | EMP9
 HR             | EMP1
 HR             | EMP10
 HR             | EMP11
 HR             | EMP12
 HR             | EMP13
 HR             | EMP14
 HR             | EMP2
 HR             | EMP3
 HR             | EMP4
 HR             | EMP5
 HR             | EMP6
 HR             | EMP7
 HR             | EMP8
 HR             | EMP9
 SALES          | EMP1
 SALES          | EMP10
 SALES          | EMP11
 SALES          | EMP12
 SALES          | EMP13
 SALES          | EMP14
 SALES          | EMP2
 SALES          | EMP3
 SALES          | EMP4
 SALES          | EMP5
 SALES          | EMP6
 SALES          | EMP7
 SALES          | EMP8
 SALES          | EMP9
(56 rows)

-- INNER JOIN.
SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM l_test_tbl2 d, f_test_tbl1 e WHERE d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d INNER JOIN l_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

-- OUTER JOINS.
SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d LEFT OUTER JOIN l_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
 40 | HR             |      |       |         |   
(15 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d RIGHT OUTER JOIN l_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
(14 rows)

SELECT d.c1, d.c2, e.c1, e.c2, e.c6, e.c8
  FROM f_test_tbl2 d FULL OUTER JOIN l_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
 c1 |       c2       |  c1  |  c2   |   c6    | c8 
----+----------------+------+-------+---------+----
 10 | DEVELOPMENT    |  700 | EMP7  | 2450.34 | 10
 10 | DEVELOPMENT    |  900 | EMP9  |    5000 | 10
 10 | DEVELOPMENT    | 1400 | EMP14 |    1300 | 10
 20 | ADMINISTRATION |  100 | EMP1  |   800.3 | 20
 20 | ADMINISTRATION |  400 | EMP4  |    2975 | 20
 20 | ADMINISTRATION |  800 | EMP8  |    3000 | 20
 20 | ADMINISTRATION | 1100 | EMP11 |    1100 | 20
 20 | ADMINISTRATION | 1300 | EMP13 |    3000 | 20
 30 | SALES          |  200 | EMP2  |    1600 | 30
 30 | SALES          |  300 | EMP3  |    1250 | 30
 30 | SALES          |  500 | EMP5  | 1250.23 | 30
 30 | SALES          |  600 | EMP6  |    2850 | 30
 30 | SALES          | 1000 | EMP10 |    1500 | 30
 30 | SALES          | 1200 | EMP12 |     950 | 30
 40 | HR             |      |       |         |   
(15 rows)

-- Retrieve complex data containing Sub-fields, dates, Arrays
SELECT * FROM countries ORDER BY _id;
           _id            |  name   | population | capital  |  hdi  
--------------------------+---------+------------+----------+-------
 5381ccf9d6d81c8e8bf0434f | Ukraine |   45590000 | Kyiv     |  0.74
 5381ccf9d6d81c8e8bf04350 | Poland  |   38540000 | Warsaw   | 0.821
 5381ccf9d6d81c8e8bf04351 | Moldova |    3560000 | Chișinău |  0.66
(3 rows)

SELECT * FROM country_elections ORDER BY _id;
           _id            | lastElections.type | lastElections.date  
--------------------------+--------------------+---------------------
 5381ccf9d6d81c8e8bf0434f | presidential       | 2014-05-25 00:00:00
 5381ccf9d6d81c8e8bf04350 | parliamentary      | 2011-10-09 00:00:00
 5381ccf9d6d81c8e8bf04351 | parliamentary      | 2010-11-28 00:00:00
(3 rows)

SELECT * FROM main_exports ORDER BY _id;
           _id            |                                                                                         mainExports                                                                                         
--------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 5381ccf9d6d81c8e8bf0434f | {"Semi-finished products of iron or non-alloy steel","Flat-rolled products of iron or non-alloy steel","Sunflower-seed, safflower or cotton-seed oil"}
 5381ccf9d6d81c8e8bf04350 | {"Parts and accessories of the motor vehicles of headings 87.01 to 87.0","Motor cars and other motor vehicles principally designed for the transport","Reception apparatus for television"}
 5381ccf9d6d81c8e8bf04351 | {"Wine of fresh grapes, including fortified wines","Insulated (including enameled or anodized) wire, cable","Sunflower seeds, whether or not broken"}
(3 rows)

-- Retrieve complex data containing Json objects (__doc tests)
SELECT json_data.key AS key1, json_data.value AS value1
  FROM test_json, json_each_text(test_json.__doc) AS json_data
  WHERE key NOT IN ('_id') ORDER BY json_data.key COLLATE "C";
       key1        |           value1            
-------------------+-----------------------------
 warehouse_created | { "$date" : 1418368330000 }
 warehouse_created | { "$date" : 1447229590000 }
 warehouse_id      | 1
 warehouse_id      | 2
 warehouse_name    | UPS
 warehouse_name    | Laptop
(6 rows)

SELECT json_data.key AS key1, json_data.value AS value1
  FROM test_jsonb, jsonb_each_text(test_jsonb.__doc) AS json_data
  WHERE key NOT IN ('_id') ORDER BY json_data.key COLLATE "C";
       key1        |          value1          
-------------------+--------------------------
 warehouse_created | {"$date": 1418368330000}
 warehouse_created | {"$date": 1447229590000}
 warehouse_id      | 1
 warehouse_id      | 2
 warehouse_name    | UPS
 warehouse_name    | Laptop
(6 rows)

SELECT json_data.key AS key1, json_data.value AS value1
  FROM test_text, json_each_text(test_text.__doc::json) AS json_data
  WHERE key NOT IN ('_id') ORDER BY json_data.key COLLATE "C";
       key1        |           value1            
-------------------+-----------------------------
 warehouse_created | { "$date" : 1418368330000 }
 warehouse_created | { "$date" : 1447229590000 }
 warehouse_id      | 1
 warehouse_id      | 2
 warehouse_name    | UPS
 warehouse_name    | Laptop
(6 rows)

SELECT json_data.key AS key1, json_data.value AS value1
  FROM test_varchar, json_each_text(test_varchar.__doc::json) AS json_data
  WHERE key NOT IN ('_id') ORDER BY json_data.key COLLATE "C";
       key1        |           value1            
-------------------+-----------------------------
 warehouse_created | { "$date" : 1418368330000 }
 warehouse_created | { "$date" : 1447229590000 }
 warehouse_id      | 1
 warehouse_id      | 2
 warehouse_name    | UPS
 warehouse_name    | Laptop
(6 rows)

-- Inserts some values in mongo_test collection.
INSERT INTO f_mongo_test VALUES ('0', 1, 'One');
INSERT INTO f_mongo_test VALUES ('0', 2, 'Two');
INSERT INTO f_mongo_test VALUES ('0', 3, 'Three');
INSERT INTO f_mongo_test VALUES ('0', 4, 'Four');
INSERT INTO f_mongo_test VALUES ('0', 5, 'Five');
INSERT INTO f_mongo_test VALUES ('0', 6, 'Six');
INSERT INTO f_mongo_test VALUES ('0', 7, 'Seven');
INSERT INTO f_mongo_test VALUES ('0', 8, 'Eight');
INSERT INTO f_mongo_test VALUES ('0', 9, 'Nine');
INSERT INTO f_mongo_test VALUES ('0', 10, 'Ten');
-- Retrieve Data From foreign tables in functions.
CREATE OR REPLACE FUNCTION test_param_where() RETURNS void AS $$
DECLARE
  n varchar;
BEGIN
  FOR x IN 1..9 LOOP
    SELECT b INTO n FROM f_mongo_test WHERE a = x;
    RAISE NOTICE 'Found number %', n;
  END LOOP;
  return;
END
$$ LANGUAGE plpgsql;
SELECT test_param_where();
NOTICE:  Found number One
NOTICE:  Found number Two
NOTICE:  Found number Three
NOTICE:  Found number Four
NOTICE:  Found number Five
NOTICE:  Found number Six
NOTICE:  Found number Seven
NOTICE:  Found number Eight
NOTICE:  Found number Nine
 test_param_where 
------------------
 
(1 row)

-- FDW-103: Parameter expression should work correctly with WHERE clause.
SELECT a, b FROM f_mongo_test WHERE a = (SELECT 2) ORDER BY a;
 a |  b  
---+-----
 2 | Two
(1 row)

SELECT a, b FROM f_mongo_test WHERE b = (SELECT 'Seven'::text) ORDER BY a;
 a |   b   
---+-------
 7 | Seven
(1 row)

-- Create local table and load data into it.
CREATE TABLE l_mongo_test AS SELECT a, b FROM f_mongo_test;
-- Check correlated query.
SELECT a, b FROM l_mongo_test lt
  WHERE lt.b = (SELECT b FROM f_mongo_test ft WHERE lt.b = ft.b)
  ORDER BY a;
 a  |           b           
----+-----------------------
  0 | mongo_test collection
  1 | One
  2 | Two
  3 | Three
  4 | Four
  5 | Five
  6 | Six
  7 | Seven
  8 | Eight
  9 | Nine
 10 | Ten
(11 rows)

SELECT a, b FROM l_mongo_test lt
  WHERE lt.a = (SELECT a FROM f_mongo_test ft WHERE lt.a = ft.a)
  ORDER BY a;
 a  |           b           
----+-----------------------
  0 | mongo_test collection
  1 | One
  2 | Two
  3 | Three
  4 | Four
  5 | Five
  6 | Six
  7 | Seven
  8 | Eight
  9 | Nine
 10 | Ten
(11 rows)

SELECT c1, c8 FROM f_test_tbl1 ft1
  WHERE ft1.c8 = (SELECT c1 FROM f_test_tbl2 ft2 WHERE ft1.c8 = ft2.c1)
  ORDER BY c1 LIMIT 2;
 c1  | c8 
-----+----
 100 | 20
 200 | 30
(2 rows)

-- FDW-197: Casting target list should give correct result.
SELECT a::float FROM f_mongo_test ORDER BY a LIMIT 2;
 a 
---
 0
 1
(2 rows)

SELECT a::boolean FROM f_mongo_test ORDER BY a LIMIT 2;
 a 
---
 f
 t
(2 rows)

SELECT a, b::varchar FROM f_mongo_test ORDER BY a LIMIT 3;
 a |           b           
---+-----------------------
 0 | mongo_test collection
 1 | One
 2 | Two
(3 rows)

SELECT a::float, b::varchar FROM f_mongo_test ORDER BY a LIMIT 2;
 a |           b           
---+-----------------------
 0 | mongo_test collection
 1 | One
(2 rows)

SELECT a::real, b::char(20) FROM f_mongo_test ORDER BY a LIMIT 2;
 a |          b           
---+----------------------
 0 | mongo_test collectio
 1 | One                 
(2 rows)

SELECT c1, c2::text FROM f_test_tbl1 ORDER BY c1 LIMIT 2;
 c1  |  c2  
-----+------
 100 | EMP1
 200 | EMP2
(2 rows)

SELECT a, LENGTH(b) FROM f_mongo_test ORDER BY 1 LIMIT 2;
 a | length 
---+--------
 0 |     21
 1 |      3
(2 rows)

SELECT t1.c6::float, t1.c6::int, t1.c5::timestamptz, t1.c3::text, t2.c1::numeric, t2.c3
  FROM f_test_tbl1 t1, f_test_tbl2 t2 WHERE t1.c8 = t2.c1
  ORDER BY t2.c1, t1.c6 LIMIT 5;
   c6    |  c6  |           c5           |   c3    | c1 |    c3    
---------+------+------------------------+---------+----+----------
    1300 | 1300 | 1982-01-23 00:00:00-08 | ADMIN   | 10 | PUNE
 2450.34 | 2450 | 1981-06-09 00:00:00-07 | MANAGER | 10 | PUNE
    5000 | 5000 | 1981-11-17 00:00:00-08 | HEAD    | 10 | PUNE
   800.3 |  800 | 1980-12-17 00:00:00-08 | ADMIN   | 20 | BANGLORE
    1100 | 1100 | 1987-05-23 00:00:00-07 | ADMIN   | 20 | BANGLORE
(5 rows)

SELECT SUM(a::float), SUM(a % 2), a % 2 AS "a % 2"FROM f_mongo_test
  GROUP BY a % 2 ORDER BY 2;
 sum | sum | a % 2 
-----+-----+-------
  30 |   0 |     0
  25 |   5 |     1
(2 rows)

SELECT (c6::float + (c1 * length(c3::text))) AS "c1 + c6", c1, c6
  FROM f_test_tbl1 ORDER BY c1 LIMIT 5;
 c1 + c6 | c1  |   c6    
---------+-----+---------
  1300.3 | 100 |   800.3
    3200 | 200 |    1600
    3650 | 300 |    1250
    5775 | 400 |    2975
 5250.23 | 500 | 1250.23
(5 rows)

-- FDW-249; LEFT JOIN LATERAL should not crash
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a, t1.b, t3.a, t1_a FROM f_mongo_test t1 LEFT JOIN LATERAL (
  SELECT t2.a, t1.a AS t1_a FROM f_mongo_test t2) t3 ON t1.a = t3.a ORDER BY 1 ASC NULLS FIRST;
                       QUERY PLAN                        
---------------------------------------------------------
 Nested Loop Left Join
   Output: t1.a, t1.b, t2.a, (t1.a)
   ->  Foreign Scan on public.f_mongo_test t1
         Output: t1._id, t1.a, t1.b
         Foreign Namespace: mongo_fdw_regress.mongo_test
   ->  Foreign Scan on public.f_mongo_test t2
         Output: t2.a, t1.a
         Filter: (t1.a = t2.a)
         Foreign Namespace: mongo_fdw_regress.mongo_test
(9 rows)

SELECT t1.a, t1.b, t3.a, t1_a FROM f_mongo_test t1 LEFT JOIN LATERAL (
  SELECT t2.a, t1.a AS t1_a FROM f_mongo_test t2) t3 ON t1.a = t3.a ORDER BY 1 ASC NULLS FIRST;
 a  |           b           | a  | t1_a 
----+-----------------------+----+------
  0 | mongo_test collection |  0 |    0
  1 | One                   |  1 |    1
  2 | Two                   |  2 |    2
  3 | Three                 |  3 |    3
  4 | Four                  |  4 |    4
  5 | Five                  |  5 |    5
  6 | Six                   |  6 |    6
  7 | Seven                 |  7 |    7
  8 | Eight                 |  8 |    8
  9 | Nine                  |  9 |    9
 10 | Ten                   | 10 |   10
(11 rows)

SELECT t1.c1, t3.c1, t3.t1_c8 FROM f_test_tbl1 t1 INNER JOIN LATERAL (
  SELECT t2.c1, t1.c8 AS t1_c8 FROM f_test_tbl2 t2) t3 ON t3.c1 = t3.t1_c8
  ORDER BY 1, 2, 3;
  c1  | c1 | t1_c8 
------+----+-------
  100 | 20 |    20
  200 | 30 |    30
  300 | 30 |    30
  400 | 20 |    20
  500 | 30 |    30
  600 | 30 |    30
  700 | 10 |    10
  800 | 20 |    20
  900 | 10 |    10
 1000 | 30 |    30
 1100 | 20 |    20
 1200 | 30 |    30
 1300 | 20 |    20
 1400 | 10 |    10
(14 rows)

SELECT t1.c1, t3.c1, t3.t1_c8 FROM l_test_tbl1 t1 LEFT JOIN LATERAL (
  SELECT t2.c1, t1.c8 AS t1_c8 FROM f_test_tbl2 t2) t3 ON t3.c1 = t3.t1_c8
  ORDER BY 1, 2, 3;
  c1  | c1 | t1_c8 
------+----+-------
  100 | 20 |    20
  200 | 30 |    30
  300 | 30 |    30
  400 | 20 |    20
  500 | 30 |    30
  600 | 30 |    30
  700 | 10 |    10
  800 | 20 |    20
  900 | 10 |    10
 1000 | 30 |    30
 1100 | 20 |    20
 1200 | 30 |    30
 1300 | 20 |    20
 1400 | 10 |    10
(14 rows)

SELECT c1, c2, (SELECT r FROM (SELECT c1 AS c1) x, LATERAL (SELECT c1 AS r) y)
  FROM f_test_tbl1 ORDER BY 1, 2, 3;
  c1  |  c2   |  r   
------+-------+------
  100 | EMP1  |  100
  200 | EMP2  |  200
  300 | EMP3  |  300
  400 | EMP4  |  400
  500 | EMP5  |  500
  600 | EMP6  |  600
  700 | EMP7  |  700
  800 | EMP8  |  800
  900 | EMP9  |  900
 1000 | EMP10 | 1000
 1100 | EMP11 | 1100
 1200 | EMP12 | 1200
 1300 | EMP13 | 1300
 1400 | EMP14 | 1400
(14 rows)

-- LATERAL JOIN with RIGHT should throw error
SELECT t1.c1, t3.c1, t3.t1_c8 FROM f_test_tbl1 t1 RIGHT JOIN LATERAL (
  SELECT t2.c1, t1.c8 AS t1_c8 FROM f_test_tbl2 t2) t3 ON t3.c1 = t3.t1_c8
  ORDER BY 1, 2, 3;
ERROR:  invalid reference to FROM-clause entry for table "t1"
LINE 2:   SELECT t2.c1, t1.c8 AS t1_c8 FROM f_test_tbl2 t2) t3 ON t3...
                        ^
DETAIL:  The combining JOIN type must be INNER or LEFT for a LATERAL reference.
-- FDW-262: Should throw an error when we select system attribute.
SELECT xmin FROM f_test_tbl1;
ERROR:  system attribute "xmin" can't be fetched from remote relation
SELECT ctid, xmax, tableoid FROM f_test_tbl1;
ERROR:  system attribute "ctid" can't be fetched from remote relation
SELECT xmax, c1 FROM f_test_tbl1;
ERROR:  system attribute "xmax" can't be fetched from remote relation
SELECT count(tableoid) FROM f_test_tbl1;
ERROR:  system attribute "tableoid" can't be fetched from remote relation
-- FDW-391: Support whole-row reference.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c2, t1 FROM f_test_tbl1 t1
  WHERE c1 = 100 ORDER BY 1;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Output: c2, t1.*
   Sort Key: t1.c2
   ->  Foreign Scan on public.f_test_tbl1 t1
         Output: c2, t1.*
         Foreign Namespace: mongo_fdw_regress.test_tbl1
(6 rows)

-- Force hash-join for consistent result.
SET enable_mergejoin TO off;
SET enable_nestloop TO off;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT d, d.c2, e.c1, e
  FROM f_test_tbl2 d LEFT OUTER JOIN f_test_tbl1 e ON d.c1 = e.c8 ORDER BY 1, 3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: d.*, d.c2, e.c1, e.*
   Sort Key: d.*, e.c1
   ->  Hash Left Join
         Output: d.*, d.c2, e.c1, e.*
         Hash Cond: (d.c1 = e.c8)
         ->  Foreign Scan on public.f_test_tbl2 d
               Output: d.*, d.c2, d.c1
               Foreign Namespace: mongo_fdw_regress.test_tbl2
         ->  Hash
               Output: e.c1, e.*, e.c8
               ->  Foreign Scan on public.f_test_tbl1 e
                     Output: e.c1, e.*, e.c8
                     Foreign Namespace: mongo_fdw_regress.test_tbl1
(14 rows)

RESET enable_mergejoin;
RESET enable_nestloop;
-- FDW-427: The numeric value should display correctly as per precision and
-- scale defined.
SELECT c1 FROM f_test5 ORDER BY 1;
    c1     
-----------
     -1.23
 12.345678
(2 rows)

-- Number with the required precision.
DROP FOREIGN TABLE f_test5;
CREATE FOREIGN TABLE f_test5 (_id NAME, c1 NUMERIC(8, 6))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test5');
SELECT c1 FROM f_test5 ORDER BY 1;
    c1     
-----------
 -1.230000
 12.345678
(2 rows)

-- Number with less scale. Should round-off the scale.
DROP FOREIGN TABLE f_test5;
CREATE FOREIGN TABLE f_test5 (_id NAME, c1 NUMERIC(6, 2))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test5');
SELECT c1 FROM f_test5 ORDER BY 1;
  c1   
-------
 -1.23
 12.35
(2 rows)

-- Number only with precision.
DROP FOREIGN TABLE f_test5;
CREATE FOREIGN TABLE f_test5 (_id NAME, c1 NUMERIC(2))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test5');
SELECT c1 FROM f_test5 ORDER BY 1;
 c1 
----
 -1
 12
(2 rows)

-- Number with improper precision and scale,
-- resulting in error "numeric field overflow".
DROP FOREIGN TABLE f_test5;
CREATE FOREIGN TABLE f_test5 (_id NAME, c1 NUMERIC(3, 2))
  SERVER mongo_server OPTIONS (database 'mongo_fdw_regress', collection 'test5');
SELECT c1 FROM f_test5 ORDER BY 1;
ERROR:  numeric field overflow
DETAIL:  A field with precision 3, scale 2 must round to an absolute value less than 10^1.
-- FDW-418: Resolve data compatibility.
SELECT a FROM f_test_tbl4 ORDER BY 1;
       a       
---------------
          0.00
         25.00
         25.00
         25.09
 9999999999.00
(5 rows)

SELECT a FROM f_test_tbl5 ORDER BY 1;
 a 
---
 f
 t
 t
 t
 t
(5 rows)

SELECT a FROM f_test_tbl6 ORDER BY 1;
 a  
----
  1
 25
 25
 25
(4 rows)

SELECT a FROM f_test_tbl7 ORDER BY 1;
ERROR:  value "9999999999" is out of range for type integer
-- FDW-529: Fix server crash caused due to missed handling of Param node for
-- comparison expressions while preparing query filter.
CREATE OR REPLACE FUNCTION fdw529_test_param_where() RETURNS int AS $$
DECLARE
  val1 INT := 5;
  val2 INT := 10;
  cnt INT;
BEGIN
  SELECT count(*) INTO cnt FROM f_mongo_test WHERE a > val1 AND a < val2;
  RETURN cnt;
END
$$ LANGUAGE plpgsql;
SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

-- This should not crash
SELECT fdw529_test_param_where();
 fdw529_test_param_where 
-------------------------
                       4
(1 row)

-- FDW-669: Fix issue join pushdown doesn't return a result for join condition
-- on sub-column. This has been fixed by omitting a dot (".") from variables
-- used (declared by $let field) to form the MongoDB query pipeline.
SELECT * FROM testlog t INNER JOIN testdevice d
  ON d.level = t."logMeta.nestMore.level";
           _id            |    log    | logMeta.logMac | logMeta.nestMore.level |           _id            |    name     |     mac      | level 
--------------------------+-----------+----------------+------------------------+--------------------------+-------------+--------------+-------
 658040214898199d6e0173d0 | hello log | 001122334455   |                      3 | 6580400c4898199d6e0173cd | test device | 001122334455 |     3
(1 row)

-- Cleanup
DELETE FROM f_mongo_test WHERE a != 0;
DROP TABLE l_test_tbl1;
DROP TABLE l_test_tbl2;
DROP TABLE l_mongo_test;
DROP VIEW smpl_vw;
DROP VIEW comp_vw;
DROP VIEW temp_vw;
DROP VIEW mul_tbl_view;
DROP FUNCTION test_param_where();
DROP FUNCTION fdw529_test_param_where();
DROP FOREIGN TABLE f_mongo_test;
DROP FOREIGN TABLE f_test_tbl1;
DROP FOREIGN TABLE f_test_tbl2;
DROP FOREIGN TABLE countries;
DROP FOREIGN TABLE country_elections;
DROP FOREIGN TABLE main_exports;
DROP FOREIGN TABLE test_json;
DROP FOREIGN TABLE test_jsonb;
DROP FOREIGN TABLE test_text;
DROP FOREIGN TABLE test_varchar;
DROP FOREIGN TABLE f_test5;
DROP FOREIGN TABLE f_test_tbl4;
DROP FOREIGN TABLE f_test_tbl5;
DROP FOREIGN TABLE f_test_tbl6;
DROP FOREIGN TABLE f_test_tbl7;
DROP FOREIGN TABLE testlog;
DROP FOREIGN TABLE testdevice;
DROP USER MAPPING FOR public SERVER mongo_server;
DROP SERVER mongo_server;
DROP EXTENSION mongo_fdw;
